{
    "collab_server" : "",
    "contents" : "##########################################\n##PLOT HEXAGONAL COMPONENT PLANES\n##from \"kohnonen\" library output\n##\n##\n##BY SETH E. SPIELMAN, UNIVERSITY OF COLORADO\n##\n##NEEDS SOME LOVE.  \n##RUDIMENTRARY BUT FUNCTIONAL\n##\n##BORROWS CODE FROM\n##http://nbremer.blogspot.nl/2013/11/how-to-create-hexagonal-heatmap-in-r.html\n##kohnonen library source\n################################################\n\n##PLOTTING FUNCTION\nplotCplane <- function(som_obj, variable=sample(colnames(som_obj$data), 1), \n                       type=\"Quantile\", legend=FALSE, Y = F, title=NULL){\n  par(mar=c(1,1,2,1))\n  if (is.numeric(variable)){\n    variable <- colnames(som_obj$data)[variable]\n  }\n  \n  if (som_obj$grid$topo != \"hexagonal\"){\n    stop(\"function assumes hexgonal SOM\")\n  }\n  #xCoord <- rep(1:som_obj$grid$xdim, som_obj$grid$ydim)\n  #yCoord <- rep(1:som_obj$grid$ydim, each=som_obj$grid$xdim)\n  #plane_codebook <- data.frame(xCoord, yCoord, som_obj$codes) #contains vector codebook and position\n  \n  component_plane_matrix <- function(data=plane_codebook, variable_index_or_name=variable){\n    \n    if(class(som_obj$codes) == \"list\")\n      cp <- matrix(nrow=som_obj$grid$ydim, ncol=som_obj$grid$xdim, data=data$X[,variable_index_or_name]) #, byrow=TRUE)\n    else\n      cp <- matrix(nrow=som_obj$grid$ydim, ncol=som_obj$grid$xdim, data=data[,variable_index_or_name]) #, byrow=TRUE)\n\n    if(Y == T)\n      cp <- matrix(nrow=som_obj$grid$ydim, ncol=som_obj$grid$xdim, data=data$Y) #, byrow=TRUE)\n    \n    return(cp)\n  }\n  \n  #Function to create the polygon for each hexagon\n  #from http://nbremer.blogspot.nl/2013/11/how-to-create-hexagonal-heatmap-in-r.html\n  Hexagon <- function (x, y, unitcell = 1, col = \"grey\", border=NA) {\n    polygon(c(x, x, x + unitcell/2, x + unitcell, x + unitcell, \n              x + unitcell/2), c(y + unitcell * 0.125, y + unitcell * \n                                   0.875, y + unitcell * 1.125, y + unitcell * 0.875, \n                                 y + unitcell * 0.125, y - unitcell * 0.125), \n            col = col, border=border)\n  }\n  \n  hm <- component_plane_matrix(data=som_obj$codes, variable_index_or_name=variable)\n  \n  p_title <- substr(variable, 1, 10)\n  if(Y == T)\n    p_title <- \"Training Data\"\n  \n  if(!is.null(title))\n    p_title <- title\n  \n  plot(0, 0, type = \"n\", axes = FALSE, xlim=c(0, som_obj$grid$xdim), \n       ylim=c(0, som_obj$grid$ydim), xlab=\"\", ylab= \"\", asp=1, main=p_title)\n  \n  ColRamp <- rev(designer.colors(n=50, col=brewer.pal(9, \"Spectral\")))\n  \n  ColorCode <- rep(\"#FFFFFF\", length(hm)) #default is all white\n  \n  if(type == \"Equal Interval\") {\n    #Equal interval bins\n    Bins <- seq(-1.5, 1.5, length=length(ColRamp))\n  }\n  \n  if(type == \"Quantile\") {\n    #Quantile colorbins\n\n    if(class(som_obj$codes) == \"list\")\n      Bins <- quantile(x=som_obj$codes$X, probs=cumsum(rep(1/length(ColRamp), length(ColRamp))))\n    else\n      Bins <- quantile(x=som_obj$codes, probs=cumsum(rep(1/length(ColRamp), length(ColRamp))))\n\n    if(Y == T)\n      Bins <- quantile(x=som_obj$codes$Y, probs=cumsum(rep(1/length(ColRamp), length(ColRamp))))\n\n  }\n  \n  \n  for (i in 1:length(hm))\n    if (!is.na(hm[i])) ColorCode[i] <- ColRamp[which.min(abs(Bins-hm[i]))] \n  \n  \n  offset <- 0.5 #offset for the hexagons when moving up a row\n  ind <- 1\n  for (row in 1:som_obj$grid$ydim) {\n    for (column in 0:(som_obj$grid$xdim - 1)) {\n      Hexagon(column + offset, row - 1, col = ColorCode[ind])\n      ind <- ind +1}\n    offset <- ifelse(offset, 0, 0.5)\n  }  \n  if (legend==TRUE){\n    image.plot(legend.only=TRUE, col=ColRamp, zlim=c(-1.5,1.5))\n  }\n  \n}",
    "created" : 1481503971522.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "615193815",
    "id" : "B4F1162A",
    "lastKnownWriteTime" : 1481508103,
    "last_content_update" : 1481508103205,
    "path" : "~/Downloads/shiny_project_2/som_c_plot.R",
    "project_path" : "som_c_plot.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}